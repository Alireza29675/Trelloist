(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"J:\\xampp\\htdocs\\Trelloist\\js\\Objects\\Board.js":[function(require,module,exports){
// Generated by CoffeeScript 1.8.0
(function() {
  var Board, Globe, List,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Globe = require("./Globe");

  List = require("./List");

  module.exports = Board = (function(_super) {
    __extends(Board, _super);

    function Board(boardData, onReady) {
      Board.__super__.constructor.apply(this, arguments);
      this.id = boardData.id;
      this.name = boardData.name;
      this.lists = [];
      this.members = [];
      this.labels = [];
      this.trelloObj = boardData;
      this.makeReadyLists((function(_this) {
        return function() {
          return onReady(_this);
        };
      })(this));
      this;
    }

    Board.prototype.makeReadyLists = function(onReady) {
      var listData, _i, _len, _ref;
      _ref = this.trelloObj.lists;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        listData = _ref[_i];
        this.lists.push(new List(listData, this.trelloObj));
      }
      return onReady();
    };

    return Board;

  })(Globe);

}).call(this);

},{"./Globe":"J:\\xampp\\htdocs\\Trelloist\\js\\Objects\\Globe.js","./List":"J:\\xampp\\htdocs\\Trelloist\\js\\Objects\\List.js"}],"J:\\xampp\\htdocs\\Trelloist\\js\\Objects\\Card.js":[function(require,module,exports){
// Generated by CoffeeScript 1.8.0
(function() {
  var Card, Globe,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Globe = require("./Globe");

  module.exports = Card = (function(_super) {
    __extends(Card, _super);

    function Card(cardData) {
      this.id = cardData.id;
      this.name = this.text = cardData.name;
      this.desc = cardData.desc;
      this.members = [];
      this.labels = [];
      this.trelloObj = cardData;
    }

    return Card;

  })(Globe);

}).call(this);

},{"./Globe":"J:\\xampp\\htdocs\\Trelloist\\js\\Objects\\Globe.js"}],"J:\\xampp\\htdocs\\Trelloist\\js\\Objects\\Globe.js":[function(require,module,exports){
// Generated by CoffeeScript 1.8.0
(function() {
  var Globe;

  module.exports = Globe = (function() {
    function Globe() {}

    return Globe;

  })();

}).call(this);

},{}],"J:\\xampp\\htdocs\\Trelloist\\js\\Objects\\List.js":[function(require,module,exports){
// Generated by CoffeeScript 1.8.0
(function() {
  var Card, Globe, List,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Globe = require("./Globe");

  Card = require("./Card");

  module.exports = List = (function(_super) {
    __extends(List, _super);

    function List(listData, boardData) {
      this.boardData = boardData;
      List.__super__.constructor.apply(this, arguments);
      this.id = listData.id;
      this.name = listData.name;
      this.cards = [];
      this.trelloObj = listData;
      this.makeReadyCards();
      this;
    }

    List.prototype.makeReadyCards = function() {
      var cardData, _i, _len, _ref, _results;
      _ref = this.boardData.cards;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        cardData = _ref[_i];
        if (cardData.idList === this.id) {
          _results.push(this.cards.push(new Card(cardData)));
        }
      }
      return _results;
    };

    return List;

  })(Globe);

}).call(this);

},{"./Card":"J:\\xampp\\htdocs\\Trelloist\\js\\Objects\\Card.js","./Globe":"J:\\xampp\\htdocs\\Trelloist\\js\\Objects\\Globe.js"}],"J:\\xampp\\htdocs\\Trelloist\\js\\Trelloist.js":[function(require,module,exports){
// Generated by CoffeeScript 1.8.0
(function() {
  var Board, Trelloist, api;

  api = require("./trelloAPI");

  Board = require("./Objects/Board");

  Trelloist = (function() {
    function Trelloist() {}

    Trelloist.prototype.init = function(data, startApp) {
      this.GLOBAL_BOARD = null;
      if (typeof data !== "object") {
        data = {
          appName: data,
          boardId: null
        };
      }
      return Trello.authorize({
        name: data.appName,
        scope: {
          read: true,
          write: true,
          account: true
        },
        expiration: "never",
        success: (function(_this) {
          return function() {
            _this.key = Trello.key();
            _this.token = Trello.token();
            if (data.boardId === null) {
              return startApp(_this);
            } else {
              return _this.loadBoard(data.boardId, startApp);
            }
          };
        })(this),
        error: (function(_this) {
          return function(e) {
            return console.error("We have some problems to login");
          };
        })(this)
      });
    };

    Trelloist.prototype.loadBoard = function(boardId, onSuccess) {
      var API;
      API = new api("/boards/" + boardId, {
        lists: "open",
        members: "all",
        member_fields: "all",
        list_fields: "all",
        fields: "name",
        labels: "all",
        label_fields: "all",
        cards: "all",
        card_fields: "all"
      });
      API.run("GET", (function(_this) {
        return function(boardData) {
          return _this.GLOBAL_BOARD = new Board(boardData, function(board) {
            return onSuccess(board);
          });
        };
      })(this));
      return this;
    };

    return Trelloist;

  })();

  window.Trelloist = new Trelloist();

}).call(this);

},{"./Objects/Board":"J:\\xampp\\htdocs\\Trelloist\\js\\Objects\\Board.js","./trelloAPI":"J:\\xampp\\htdocs\\Trelloist\\js\\trelloAPI.js"}],"J:\\xampp\\htdocs\\Trelloist\\js\\trelloAPI.js":[function(require,module,exports){
// Generated by CoffeeScript 1.8.0
(function() {
  var trelloAPI;

  module.exports = trelloAPI = (function() {
    function trelloAPI(url, params) {
      var key, value;
      this.apiURL = "https://api.trello.com/1" + url + "?";
      for (key in params) {
        value = params[key];
        this.apiURL += "" + key + "=" + value + "&";
      }
      this.apiURL += "key=" + (Trello.key()) + "&token=" + (Trello.token());
      this;
    }

    trelloAPI.prototype.run = function(method, onSuccess) {
      var request;
      request = new XMLHttpRequest();
      request.open(method, this.apiURL, true);
      request.onload = (function(_this) {
        return function() {
          if (request.status >= 200 && request.status < 400) {
            return onSuccess(JSON.parse(request.responseText));
          } else {
            return console.error("Something's goes wrong! Error " + request.status);
          }
        };
      })(this);
      request.onerror = (function(_this) {
        return function() {
          return console.error("Something's goes wrong! API Error!");
        };
      })(this);
      return request.send();
    };

    return trelloAPI;

  })();

}).call(this);

},{}]},{},["J:\\xampp\\htdocs\\Trelloist\\js\\Trelloist.js"]);
