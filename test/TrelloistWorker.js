(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"J:\\xampp\\htdocs\\Trelloist\\js\\TrelloistWorker.js":[function(require,module,exports){
// Generated by CoffeeScript 1.8.0
(function() {
  var api, getUpdateActions;

  api = require("./Utilites/trelloAPI");

  self.Trello = {};

  self.lastDate;

  self.lastDateSet = false;

  getUpdateActions = function() {
    var API, postParams;
    postParams = {
      filter: "all",
      fields: "all",
      limit: 50
    };
    if (self.lastDateSet) {
      postParams.since = self.lastDate;
    }
    API = new api("/boards/" + self.boardId + "/actions", postParams);
    API.run("GET", (function(_this) {
      return function(actionsData) {
        if (actionsData.length !== 0) {
          if (self.lastDateSet) {
            self.postMessage(actionsData);
          } else {
            self.lastDateSet = true;
          }
          return self.lastDate = actionsData[0].date;
        }
      };
    })(this));
    return setTimeout((function() {
      return getUpdateActions();
    }), 1000);
  };

  self.addEventListener('message', function(e) {
    switch (e.data.cmd) {
      case "start":
        Trello.token = function() {
          return e.data.token;
        };
        Trello.key = function() {
          return e.data.key;
        };
        self.boardId = e.data.boardId;
        return getUpdateActions();
    }
  }, false);

}).call(this);

},{"./Utilites/trelloAPI":"J:\\xampp\\htdocs\\Trelloist\\js\\Utilites\\trelloAPI.js"}],"J:\\xampp\\htdocs\\Trelloist\\js\\Utilites\\trelloAPI.js":[function(require,module,exports){
// Generated by CoffeeScript 1.8.0
(function() {
  var trelloAPI;

  module.exports = trelloAPI = (function() {
    function trelloAPI(url, params) {
      var key, value;
      this.apiURL = "https://api.trello.com/1" + url + "?";
      for (key in params) {
        value = params[key];
        this.apiURL += "" + key + "=" + value + "&";
      }
      this.apiURL += "key=" + (Trello.key()) + "&token=" + (Trello.token());
      this;
    }

    trelloAPI.prototype.run = function(method, onSuccess) {
      var request;
      request = new XMLHttpRequest();
      request.open(method, this.apiURL, true);
      request.onload = (function(_this) {
        return function() {
          if (request.status >= 200 && request.status < 400) {
            return onSuccess(JSON.parse(request.responseText));
          } else {
            return console.error("Something's goes wrong! Error " + request.status, request.responseText);
          }
        };
      })(this);
      request.onerror = (function(_this) {
        return function() {
          return console.error("Something's goes wrong! API Error!");
        };
      })(this);
      return request.send();
    };

    return trelloAPI;

  })();

}).call(this);

},{}]},{},["J:\\xampp\\htdocs\\Trelloist\\js\\TrelloistWorker.js"]);
